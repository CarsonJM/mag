nextflow_pipeline {

    name "Test pipeline: NFCORE_MAG"
    script "main.nf"
    tag "pipeline"
    tag "nfcore_mag"
    tag "nfcore_mag_test"

    test("Parameters: default test") {
        when {
            params {
                outdir                      = "$outputDir"
                input                       = 'https://raw.githubusercontent.com/nf-core/test-datasets/mag/samplesheets/samplesheet.multirun.csv'
                centrifuge_db               = "https://raw.githubusercontent.com/nf-core/test-datasets/mag/test_data/minigut_cf.tar.gz"
                kraken2_db                  = "https://raw.githubusercontent.com/nf-core/test-datasets/mag/test_data/minigut_kraken.tgz"
                skip_krona                  = true
                min_length_unbinned_contigs = 1
                max_unbinned_contigs        = 2
                busco_db                    = "https://busco-data.ezlab.org/v5/data/lineages/bacteria_odb10.2020-03-06.tar.gz"
                busco_clean                 = true
                skip_gtdbtk                 = true
                skip_concoct                = true
                megahit_fix_cpu_1           = true
                spades_fix_cpus             = 2
                spadeshybrid_fix_cpus       = 2
                metabat_rng_seed            = 1
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(
                    path("${params.outdir}/Annotation/Prodigal/"),
                    path("${params.outdir}/Annotation/Prokka/MEGAHIT/MEGAHIT-MaxBin2-test_minigut.001/MEGAHIT-MaxBin2-test_minigut.001.tsv"),
                    path("${params.outdir}/Annotation/Prokka/MEGAHIT/MEGAHIT-MetaBAT2-test_minigut_sample2.unbinned.1/MEGAHIT-MetaBAT2-test_minigut_sample2.unbinned.1.tsv"),
                    path("${params.outdir}/Annotation/Prokka/MEGAHIT/MEGAHIT-MetaBAT2-test_minigut.1/MEGAHIT-MetaBAT2-test_minigut.1.tsv"),
                    path("${params.outdir}/Annotation/Prokka/MEGAHIT/MEGAHIT-MetaBAT2-test_minigut.unbinned.1/MEGAHIT-MetaBAT2-test_minigut.unbinned.1.tsv"),
                    path("${params.outdir}/Annotation/Prokka/SPAdes/SPAdes-MaxBin2-test_minigut_sample2.001/SPAdes-MaxBin2-test_minigut_sample2.001.tsv"),
                    path("${params.outdir}/Annotation/Prokka/SPAdes/SPAdes-MaxBin2-test_minigut_sample2.noclass.1/SPAdes-MaxBin2-test_minigut_sample2.noclass.1.tsv"),
                    path("${params.outdir}/Annotation/Prokka/SPAdes/SPAdes-MaxBin2-test_minigut.001/SPAdes-MaxBin2-test_minigut.001.tsv"),
                    path("${params.outdir}/Annotation/Prokka/SPAdes/SPAdes-MetaBAT2-test_minigut_sample2.unbinned.1/SPAdes-MetaBAT2-test_minigut_sample2.unbinned.1.tsv"),
                    path("${params.outdir}/Annotation/Prokka/SPAdes/SPAdes-MetaBAT2-test_minigut.1/SPAdes-MetaBAT2-test_minigut.1.tsv"),
                    path("${params.outdir}/Annotation/Prokka/SPAdes/SPAdes-MetaBAT2-test_minigut.unbinned.1/SPAdes-MetaBAT2-test_minigut.unbinned.1.tsv"),
                    path("${params.outdir}/Assembly/MEGAHIT/MEGAHIT-test_minigut_sample2.contigs.fa.gz"),
                    path("${params.outdir}/Assembly/MEGAHIT/MEGAHIT-test_minigut.contigs.fa.gz"),
                    path("${params.outdir}/Assembly/SPAdes/SPAdes-test_minigut_sample2_contigs.fasta.gz"),
                    path("${params.outdir}/Assembly/SPAdes/SPAdes-test_minigut_contigs.fasta.gz"),
                    //path("${params.outdir}/GenomeBinning/depths/bins/bin_depths_summary.tsv"),
                    path("${params.outdir}/GenomeBinning/depths/contigs/"),
                    path("${params.outdir}/GenomeBinning/MaxBin2/"),
                    path("${params.outdir}/GenomeBinning/MetaBAT2/"),
                    //path("${params.outdir}/GenomeBinning/QC/busco_summary.tsv"),
                    //path("${params.outdir}/GenomeBinning/QC/quast_summary.tsv"),
                    //path("${params.outdir}/GenomeBinning/bin_summary.tsv"),
                    path("${params.outdir}/QC_shortreads/fastp/test_minigut/test_minigut_run1_fastp.fastp.json"),
                    path("${params.outdir}/QC_shortreads/fastp/test_minigut/test_minigut_run2_fastp.fastp.json"),
                    path("${params.outdir}/QC_shortreads/fastp/test_minigut_sample2/test_minigut_sample2_run0_fastp.fastp.json"),
                    path("${params.outdir}/QC_shortreads/remove_phix/test_minigut_run1_phix_removed.bowtie2.log"),
                    path("${params.outdir}/QC_shortreads/remove_phix/test_minigut_run2_phix_removed.bowtie2.log"),
                    path("${params.outdir}/QC_shortreads/remove_phix/test_minigut_sample2_run0_phix_removed.bowtie2.log"),
                    path("${params.outdir}/Taxonomy/")
                ).match() },
                { assert new File("$outputDir/multiqc/multiqc_report.html").exists() }
            )
        }
    }
}
